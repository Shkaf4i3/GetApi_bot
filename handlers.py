from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import reply as kb
from functions import (get_city_world,
                       get_cryptocurrency_rate,
                       get_currency_rate)


user_private_router = Router()

class Weather(StatesGroup):
    city_ru = State()
    city_us = State()
    city_uk = State()
    city_ua = State()


@user_private_router.message(CommandStart())
async def start_message(message: Message):
    await message.answer(f'‚ù§Ô∏è –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} ‚ù§Ô∏è\n'
                         '–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –ª—é–±—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ API üï∏\n'
                         '\n'
                         'üëá –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é üëá',
                         reply_markup=kb.main_kb())

@user_private_router.message(Command('help'))
async def help_message(message: Message):
    await message.answer('–î–∞–Ω–Ω—ã–π –±–æ—Ç - —Å–±–æ—Ä—â–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π API \n'
                         '–î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ üëâ- @shkaf4i3',
                         reply_markup=kb.back_main_kb())

@user_private_router.message(F.text == '‚ö°Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚ö°Ô∏è')
async def back_main_menu(message: Message):
    await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é',
                         reply_markup=kb.main_kb())

@user_private_router.message(F.text == 'üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç üìä')
async def currency_rates(message: Message):
    await message.answer('–ö–∞–∫–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?',
                         reply_markup=await kb.exchange_rates())

@user_private_router.message(F.text == 'üñ• –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç üñ•')
async def cryptocurrency_rates(message: Message):
    await message.answer('–ö–∞–∫–∏–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?',
                         reply_markup=await kb.exchange_crypto_rates())

@user_private_router.message(F.text == 'üåÜ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ üåÜ')
async def weather_info(message: Message):
    await message.answer('–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                         reply_markup=await kb.info_weather())




@user_private_router.callback_query(F.data == 'info_rf')
async def city_rf_weather(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Weather.city_ru)

    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')

@user_private_router.message(Weather.city_ru)
async def response_city_ru(message: Message, state: FSMContext):
    await state.update_data(city_ru=message.text)
    data = await state.get_data()
    city = data['city_ru']
    response_sity = await get_city_world(city, 'RU')

    if response_sity:
        await message.answer(f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ "{city}" - {response_sity} ¬∞C',
                             reply_markup=kb.main_kb())
    else:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ \n'
                             '–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–æ—Ä–æ–¥',
                             reply_markup=kb.main_kb())
    await state.clear()


@user_private_router.callback_query(F.data == 'info_us')
async def city_us_weather(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Weather.city_us)

    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à—Ç–∞—Ç–∞')

@user_private_router.message(Weather.city_us)
async def response_city_us(message: Message, state: FSMContext):
    await state.update_data(city_us=message.text)
    data = await state.get_data()
    city = data['city_us']
    response_city = await get_city_world(city, 'US')

    if response_city:
        await message.answer(f'–ü–æ–≥–æ–¥–∞ –≤ —à—Ç–∞—Ç–µ "{city}" - {response_city} ¬∞C',
                             reply_markup=kb.main_kb())
    else:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ \n'
                             '–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —à—Ç–∞—Ç',
                             reply_markup=kb.main_kb())
    await state.clear()


@user_private_router.callback_query(F.data == 'info_uk')
async def city_uk_weather(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Weather.city_uk)

    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')

@user_private_router.message(Weather.city_uk)
async def response_city_uk(message: Message, state: FSMContext):
    await state.update_data(city_uk=message.text)
    data = await state.get_data()
    city = data['city_uk']
    response_city = await get_city_world(city, 'UK')

    if response_city:
        await message.answer(f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ "{city}" - {response_city} ¬∞C',
                             reply_markup=kb.main_kb())
    else:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ \n'
                             '–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–æ—Ä–æ–¥',
                             reply_markup=kb.main_kb())
    await state.clear()


@user_private_router.callback_query(F.data == 'info_ua')
async def city_ua_weather(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Weather.city_ua)

    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')

@user_private_router.message(Weather.city_ua)
async def response_city_ua(message: Message, state: FSMContext):
    await state.update_data(city_ua=message.text)
    data = await state.get_data()
    city = data['city_ua']
    response_city = await get_city_world(city, 'UA')

    if response_city:
        await message.answer(f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ "{city}" - {response_city} ¬∞C',
                             reply_markup=kb.main_kb())
    else:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ \n'
                             '–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–æ—Ä–æ–¥',
                             reply_markup=kb.main_kb())
    await state.clear()


@user_private_router.callback_query(F.data == 'btc_rate')
async def btc_rate(callback: CallbackQuery):
    btc_data = await get_cryptocurrency_rate(0)
    await callback.answer()
    await callback.message.answer(f'–ö—É—Ä—Å Bitcoin - {btc_data} –¥–æ–ª–ª–∞—Ä–æ–≤')

@user_private_router.callback_query(F.data == 'ton_rate')
async def ltc_rate(callback: CallbackQuery):
    not_data = await get_cryptocurrency_rate(9)
    await callback.answer()
    await callback.message.answer(f'–ö—É—Ä—Å Notcoin - {not_data} –¥–æ–ª–ª–∞—Ä–æ–≤')

@user_private_router.callback_query(F.data == 'solana_rate')
async def usdt_rate(callback: CallbackQuery):
    solana_data = await get_cryptocurrency_rate(4)
    await callback.answer()
    await callback.message.answer(f'–ö—É—Ä—Å Solana - {solana_data} –¥–æ–ª–ª–∞—Ä–æ–≤')

@user_private_router.callback_query(F.data == 'eth_rate')
async def eth_rate(callback: CallbackQuery):
    eth_data = await get_cryptocurrency_rate(1)
    await callback.answer()
    await callback.message.answer(f'–ö—É—Ä—Å ETH - {eth_data} –¥–æ–ª–ª–∞—Ä–æ–≤')


@user_private_router.callback_query(F.data == 'usd_rate')
async def check_usd(callback: CallbackQuery):
    usd_rate = get_currency_rate('USD')

    await callback.answer()
    await callback.message.answer(f'–°–µ–π—á–∞—Å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ - {usd_rate} —Ä—É–±–ª–µ–π')

@user_private_router.callback_query(F.data == 'eur_rate')
async def check_eur(callback: CallbackQuery):
    eur_rate = get_currency_rate('EUR')

    await callback.answer()
    await callback.message.answer(f'–°–µ–π—á–∞—Å –∫—É—Ä—Å –µ–≤—Ä–æ - {eur_rate} —Ä—É–±–ª–µ–π')

@user_private_router.callback_query(F.data == 'uah_rate')
async def check_uah(callback: CallbackQuery):
    uah_rate = get_currency_rate('UAH')

    await callback.answer()
    await callback.message.answer(f'–°–µ–π—á–∞—Å –∫—É—Ä—Å –≥—Ä–∏–≤–Ω—ã - {uah_rate} —Ä—É–±–ª–µ–π')
